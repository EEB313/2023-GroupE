lakedata=read.csv("RID_196_Chem_L375.csv")
summary(lakedata)
library(tidyverse)
View(lakedata)
# mutate a column that specifies before, during, and after aquaculture
before_data <- lakedata %>%
filter(year < 2003) %>%
mutate(Treatment = "Before")
during_data <- lakedata %>%
filter(year >= 2003 & year <= 2007) %>%
mutate(Treatment = "During")
after_data <- lakedata %>%
filter(year > 2007) %>%
mutate(Treatment = "After")
new_lakedata <- as.data.frame(rbind(before_data, during_data, after_data))
View(new_lakedata)
# create a dataframe that has all observations before and during aquaculture
lakedata_no_recovery <- new_lakedata %>%
filter(Treatment!="After") %>%
filter(characteristic_name!="NA")
View(lakedata_no_recovery)
generalplotfunction=function(z){
data=new_lakedata%>%
filter(characteristic_name==z)%>%
group_by(year)%>%
summarise(mean=mean(result_value))
graph=ggplot(data,aes(x=year,y=mean))+
geom_line()+ geom_point()+geom_vline(xintercept = 2002,color = "blue", linewidth=1.5)+geom_vline(xintercept = 2008,  color = "blue", size=1.5)+labs(title=z)
return(graph)
}
generalplotfunction=function(z){
data=new_lakedata%>%
filter(characteristic_name==z)%>%
group_by(year)%>%
summarise(mean=mean(result_value))
graph=ggplot(data,aes(x=year,y=mean))+
geom_line()+ geom_point()+geom_vline(xintercept = 2002,color = "blue", linewidth=1.5)+geom_vline(xintercept = 2008,  color = "blue", size=1.5)+labs(title=z)
return(graph)
}
#target <- c(unique(lakedata$characteristic_name))
#significant_variables=filter(lakedata, characteristic_name %in% target)
#average_sigvariables_by_year=significant_variables%>%
#  group_by(year,characteristic_name)%>%
# summarise(Mean=mean(result_value))
#ggplot(average_sigvariables_by_year,aes(x=year,y=Mean))+
#  geom_line()+ geom_point()+geom_vline(xintercept = 2002,color = "blue", size=1.5)+geom_vline(xintercept = 2008,  color = "blue", size=1.5)+facet_wrap(vars(characteristic_name),scales = "free_y")
characteristic.names=c(unique(lakedata$characteristic_name))
plot_list2=list()
for( i in 1:length(characteristic.names)){
plot.data= generalplotfunction(characteristic.names[i])
plot_list2[[i]] <- plot.data
}
plot_list2
before_data
lakedata_no_recovery
library(ggpubr)
library(ggpubr)
library(ggpubr)
PARTP_timeseries <- generalplotfunction("PARTP")
PARTN_timeseries <- generalplotfunction("PARTN")
TDP_timeseries <- generalplotfunction("TDP")
SO4_timeseries <- generalplotfunction("SO4")
TDN_timeseries <- generalplotfunction("TDN")
CHLA_timeseries <- generalplotfunction("CHLA")
ggarrange(PARTP_timeseries, PARTN_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries, CHLA_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
# confused by this part of the code (Karen)
target2=unique(new_lakedata$characteristic_name)
target2.vec=as.data.frame(target2)
class(target2)
for (i in target2) {
generalplotfunction(i)
}
PARTP_timeseries
PARTN_timeseries
library(ggpubr)
PARTP_timeseries <- generalplotfunction("PARTP")
PARTN_timeseries <- generalplotfunction("PARTN")
TDP_timeseries <- generalplotfunction("TDP")
SO4_timeseries <- generalplotfunction("SO4")
TDN_timeseries <- generalplotfunction("TDN")
CHLA_timeseries <- generalplotfunction("CHLA")
ggarrange(PARTP_timeseries, PARTN_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries, CHLA_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
# confused by this part of the code (Karen)
target2=unique(new_lakedata$characteristic_name)
target2.vec=as.data.frame(target2)
class(target2)
for (i in target2) {
generalplotfunction(i)
}
target2
target2.vec
ggarrange(PARTP_timeseries, PARTN_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries, CHLA_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
library(ggpubr)
PARTP_timeseries <- generalplotfunction("PARTP")
PARTN_timeseries <- generalplotfunction("PARTN")
TDP_timeseries <- generalplotfunction("TDP")
SO4_timeseries <- generalplotfunction("SO4")
TDN_timeseries <- generalplotfunction("TDN")
CHLA_timeseries <- generalplotfunction("CHLA")
ggarrange(PARTP_timeseries, PARTN_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries, CHLA_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
# confused by this part of the code (Karen)
target2=unique(new_lakedata$characteristic_name)
target2.vec=as.data.frame(target2)
class(target2)
for (i in target2) {
generalplotfunction(i)
}
histogramfunction= function(charateristic)
{
datafunc=new_lakedata%>%
filter(characteristic_name==charateristic)%>%
select(result_value)
graph=ggplot(datafunc, aes(x = result_value)) +
geom_histogram() +labs(title=charateristic)
return(graph)
}
PARTP_hist <- histogramfunction("PARTP")
PARTN_hist <- histogramfunction("PARTN")
CHLA_hist <- histogramfunction("CHLA")
TDP_hist <- histogramfunction("TDP")
SO4_hist <- histogramfunction("SO4")
TDN_hist <- histogramfunction("TDN")
ggarrange(PARTP_hist, PARTN_hist, CHLA_hist, TDP_hist, SO4_hist,
TDN_hist+ rremove("x.text"),
ncol = 2, nrow = 3)
# confused by this code here (Karen)
histogramfunction(target2[1])
for (i in target2) {
histogramfunction(target2[i])
}
# creating a function that assesses the data's normality with shapiro test
normalfunction <- function(names) {
n.data=new_lakedata %>%
filter(characteristic_name==names) %>%
select(result_value)
num.data=as.numeric(n.data$result_value)
norm.model=shapiro.test(num.data)
return(norm.model$p.value)
}
# histograms for every variable
characteristic.names=c(unique(new_lakedata$characteristic_name))
plot_list.norm <- list()
for( i in 1:length(characteristic.names)){
plot.data <- histogramfunction(characteristic.names[i])
plot_list.norm[[i]] <- plot.data
}
plot_list.norm
PARTP_hist
PARTN_hist
ggarrange(PARTP_hist, PARTN_hist, CHLA_hist, TDP_hist, SO4_hist,
TDN_hist+ rremove("x.text"),
ncol = 2, nrow = 3)
for (i in target2) {
histogramfunction(target2[i])
}
histogramfunction= function(charateristic)
{
datafunc=new_lakedata%>%
filter(characteristic_name==charateristic)%>%
select(result_value)
graph=ggplot(datafunc, aes(x = result_value)) +
geom_histogram() +labs(title=charateristic)
return(graph)
}
PARTP_hist <- histogramfunction("PARTP")
PARTN_hist <- histogramfunction("PARTN")
CHLA_hist <- histogramfunction("CHLA")
TDP_hist <- histogramfunction("TDP")
SO4_hist <- histogramfunction("SO4")
TDN_hist <- histogramfunction("TDN")
ggarrange(PARTP_hist, PARTN_hist, CHLA_hist, TDP_hist, SO4_hist,
TDN_hist+ rremove("x.text"),
ncol = 2, nrow = 3)
# confused by this code here (Karen)
histogramfunction(target2[1])
for (i in target2) {
histogramfunction(target2[i])
}
# creating a function that assesses the data's normality with shapiro test
normalfunction <- function(names) {
n.data=new_lakedata %>%
filter(characteristic_name==names) %>%
select(result_value)
num.data=as.numeric(n.data$result_value)
norm.model=shapiro.test(num.data)
return(norm.model$p.value)
}
# histograms for every variable
characteristic.names=c(unique(new_lakedata$characteristic_name))
plot_list.norm <- list()
for( i in 1:length(characteristic.names)){
plot.data <- histogramfunction(characteristic.names[i])
plot_list.norm[[i]] <- plot.data
}
plot_list.norm
#Inital Permutation code
permutation_function <- function(){
reshuffled <- Partpdata
reshuffled$TreatmentNEW <- sample(reshuffled$Treatment, size = nrow(reshuffled), replace = F)
before <- reshuffled %>% subset(TreatmentNEW == "Before") %>% summarise(mean = mean(result_value))
during <- reshuffled %>% subset(TreatmentNEW == "During") %>% summarise(mean = mean(result_value))
return(before-during)
}
gaps <- c()
for (i in 1:1000){
gaps[i] <- permutation_function()
}
#No need these just running mixed models below
library(lme4)
library(lmerTest)
library(MuMIn)
Partpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTP")
m1 <- aov(result_value~Treatment+as.factor(year),data = Partpdata)
m2 <- glm(result_value~Treatment,data = Partpdata)
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partpdata$year)), data=Partpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
Tdpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDP")
summary(aov(result_value~Treatment,data = Tdpdata))
summary(glm(result_value~Treatment,data = Tdpdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Tdpdata$year)), data=Tdpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Tdpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
AICc(m1, m2,P_model_MM)
#No need these just running mixed models below
Partndata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTN")
summary(aov(result_value~Treatment,data = Partndata))
summary(glm(result_value~Treatment,data = Partndata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partndata$year)), data=Partndata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partndata, aes(x=Treatment,y=result_value))+
geom_boxplot()
TdNdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDN")
summary(aov(result_value~Treatment,data = TdNdata))
summary(glm(result_value~Treatment,data = TdNdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(TdNdata$year)), data=TdNdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=TdNdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
#Inital Permutation code
permutation_function <- function(){
reshuffled <- Partpdata
reshuffled$TreatmentNEW <- sample(reshuffled$Treatment, size = nrow(reshuffled), replace = F)
before <- reshuffled %>% subset(TreatmentNEW == "Before") %>% summarise(mean = mean(result_value))
during <- reshuffled %>% subset(TreatmentNEW == "During") %>% summarise(mean = mean(result_value))
return(before-during)
}
gaps <- c()
for (i in 1:1000){
gaps[i] <- permutation_function()
}
hist(unlist(gaps))
Chladata <- lakedata_no_recovery %>%
filter(characteristic_name == "CHLA")
SO4data <- lakedata_no_recovery %>%
filter(characteristic_name == "SO4")
PARTP_lmm <- lmer(result_value~Treatment+(1|year), data= Partpdata,
REML = FALSE)
TDP_lmm <- lmer(result_value~Treatment+(1|year), data= Tdpdata,
REML = FALSE)
PARTN_lmm <- lmer(result_value~Treatment+(1|year), data= Partndata,
REML = FALSE)
TDN_lmm <- lmer(result_value~Treatment+(1|year), data= TdNdata,
REML = FALSE)
CHLA_lmm <- lmer(result_value~Treatment+(1|year), data= Chladata,
REML = FALSE)
SO4_lmm <- lmer(result_value~Treatment+(1|year), data= SO4data,
REML = FALSE)
# this isn't working right now
vectorofpvalues <- c()
for (i in 1:length(characteristic.names)){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic.names[i]) %>%
select(result_value, Treatment, year)
vectorofpvalues[i] <- summary(lmer(result_value~Treatment+(1|year), data=mixed_model_data, REML = FALSE))$coefficients[2,5]
}
Chladata <- lakedata_no_recovery %>%
filter(characteristic_name == "CHLA")
SO4data <- lakedata_no_recovery %>%
filter(characteristic_name == "SO4")
PARTP_lmm <- lmer(result_value~Treatment+(1|year), data= Partpdata,
REML = FALSE)
TDP_lmm <- lmer(result_value~Treatment+(1|year), data= Tdpdata,
REML = FALSE)
PARTN_lmm <- lmer(result_value~Treatment+(1|year), data= Partndata,
REML = FALSE)
TDN_lmm <- lmer(result_value~Treatment+(1|year), data= TdNdata,
REML = FALSE)
CHLA_lmm <- lmer(result_value~Treatment+(1|year), data= Chladata,
REML = FALSE)
SO4_lmm <- lmer(result_value~Treatment+(1|year), data= SO4data,
REML = FALSE)
# this isn't working right now
vectorofpvalues <- c()
for (i in 1:length(characteristic.names)){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic.names[i]) %>%
select(result_value, Treatment, year)
vectorofpvalues[i] <- summary(lmer(result_value~Treatment+(1|year), data=mixed_model_data, REML = FALSE))$coefficients[2,5]
}
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic) %>%
select(result_value, Treatment, year)
library(tidyverse)
#Making Permutation Function
filterfunction=function(characteristic){
data.perm=lakedata_no_recovery%>%
filter(characteristic_name==characteristic)%>%
select(Treatment,result_value,year)
return(data.perm)
}
permutation_function <- function(data12){
reshuffled <- data12
reshuffled$TreatmentNEW <- sample(reshuffled$Treatment, size = nrow(reshuffled), replace = F)
model=glm(result_value~TreatmentNEW, data = reshuffled)
#lmer(result_value~TreatmentNEW+(1|as.factor(reshuffled$year)), data=reshuffled, REML=FALSE)
summary.model=summary(model)
return(summary.model$coefficients[2,1])
}
final.perm.function= function(characteristic){
filtered.data=filterfunction(characteristic)
estimates <- c()
for (i in 1:10000){
estimates[i] <- permutation_function(filtered.data)
}
estimates=as.data.frame(estimates)
data.perm=lakedata_no_recovery%>%
filter(characteristic_name==characteristic)%>%
select(Treatment,result_value,year)
model.new=summary(glm(result_value~Treatment, data = data.perm))
lol=model.new$coefficients[2,1]
plot_s=ggplot(estimates, aes(x=estimates)) +
geom_histogram( colour="black", fill="white")+ geom_vline(aes(xintercept=lol),
color="blue", linetype="dashed", size=1)+labs(title =characteristic)
return(plot_s)
}
characteristic.names=c(unique(lakedata_no_recovery$characteristic_name))
plot_list <- list()
for( i in 1:(length(characteristic.names)-1)){
plot.data= final.perm.function(characteristic.names[i])
plot_list[[i]] <- plot.data
}
plot_list
#Having issues with this code. The things run induvidually but not in the loop as a function
returnpvalueforllm=function(characteristic){
datafortest=filterfunction(characteristic)
model.new= lmer(result_value~Treatment+(1|as.factor(datafortest$year)), data=datafortest, REML=FALSE)
summary.model=summary(model.new)
return(summary.model)
}
returnpvalueforllm("ALK")
#Having issues with this code. The things run induvidually but not in the loop as a function
returnpvalueforllm=function(characteristic){
datafortest=filterfunction(characteristic)
model.new= lmer(result_value~Treatment+(1|as.factor(datafortest$year)), data=datafortest, REML=FALSE)
summary.model=summary(model.new)
return(summary.model)
}
pvalues=c()
returnpvalueforllm("ALK")
library(forecast)
alldataforecastfunction=function(y){
data1=lakedata%>%
filter(characteristic_name==y)%>%
select(result_value)
model3=auto.arima(data1)
summary(model3)
forecast_data3 <- forecast(model3, 20)
plot=plot(forecast_data3, main = y)
return(plot)
}
beforeforecastfunction=function(y){
data1=lakedata%>%
filter(characteristic_name==y)%>%
filter(year<2003)%>%
select(result_value)
model3=auto.arima(data1)
summary(model3)
forecast_data3 <- forecast(model3, 20)
plot=plot(forecast_data3, main = y)
return(plot)
}
duringforecastfunction=function(y){
data1=lakedata%>%
filter(characteristic_name==y)%>%
filter(year<2007)%>%
select(result_value)
model3=auto.arima(data1)
summary(model3)
forecast_data3 <- forecast(model3, 20)
plot=plot(forecast_data3, main = y)
return(plot)
}
ariimalist=list()
for( i in 1:(length(characteristic.names)-1)){
plot.data= alldataforecastfunction(characteristic.names[i])
ariimalist[[i]] <- plot.data
}
beforeariimalist=list()
for( i in 1:(length(characteristic.names)-1)){
plot.data= beforeforecastfunction(characteristic.names[i])
beforeariimalist[[i]] <- plot.data
}
duringariimalist=list()
for( i in 1:(length(characteristic.names)-1)){
plot.data= beforeforecastfunction(characteristic.names[i])
duringariimalist[[i]] <- plot.data
}
ariimalist
interpolationfunction=function(k){
data3=lakedata%>%
filter(characteristic_name== k)%>%
group_by(year)%>%
summarise(mean=mean(result_value))
allyears=seq(1982,2022,1)
dfallyears=data.frame(year=allyears)
merged_data <- merge(dfallyears, data3, by = "year", all = TRUE)
finaldata=merged_data%>%
select(mean)
na_p_data2 <- na.interp(finaldata)
added_data_P=as.data.frame(na_p_data2)
autoplot(na_p_data2, series="Interpolated") +
autolayer(as.ts(finaldata), series="Original") +
geom_point()+
scale_colour_manual(values=c(`Interpolated`="red",`Original`="Blue"))+
labs(title = k) +geom_vline(xintercept = c(22, 26), linetype = "dashed", color = "red")
}
interplatedlist=list()
for( i in 1:(length(characteristic.names)-1)){
plot.data= interpolationfunction(characteristic.names[i])
interplatedlist[[i]] <- plot.data
}
interplatedlist
pvalues=c()
for( i in 1:(length(characteristic.names)-1)){
pvalues[i]=  returnpvalueforllm(characteristic.names[i])
}
pvalues[i]=  returnpvalueforllm(characteristic.names[i])
