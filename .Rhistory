View(lakedata)
View(lakedata_no_recovery)
View(lakedata)
lakedata_no_recovery <- lakedata %>%
filter(Treatment!="After") %>%
filter(characteristic_name!="NA")
lakedata=read.csv("RID_196_Chem_L375.csv")
summary(lakedata)
library(tidyverse)
View(lakedata)
# mutate column for before, during, after aquaculture
before_data <- lakedata %>%
filter(year < 2003)
before_data
before_data
View(before_data)
# mutate column for before, during, after aquaculture
before_data <- lakedata %>%
filter(year < 2003) %>%
mutate(Treatment = Before)
View(before_data)
# mutate column for before, during, after aquaculture
before_data <- lakedata %>%
filter(year < 2003) %>%
mutate(Treatment = "Before")
View(before_data)
during_data <- lakedata %>%
filter(year >= 2003 & year <= 2007)
View(during_data)
new_lakedata <- as.data.frame(rbind(before_data, during_data, after_data))
after_data <- lakedata %>%
filter(year > 2007) %>%
mutate(Treatment = "After")
new_lakedata <- as.data.frame(rbind(before_data, during_data, after_data))
# mutate column for before, during, after aquaculture
before_data <- lakedata %>%
filter(year < 2003) %>%
mutate(Treatment = "Before")
View(before_data)
during_data <- lakedata %>%
filter(year >= 2003 & year <= 2007) %>%
mutate(Treatment = "During")
after_data <- lakedata %>%
filter(year > 2007) %>%
mutate(Treatment = "After")
new_lakedata <- as.data.frame(rbind(before_data, during_data, after_data))
head(new_lakedata)
head(new_lakedata)
View(new_lakedata)
lakedata_no_recovery <- new_lakedata %>%
filter(Treatment!="After") %>%
filter(characteristic_name!="NA")
View(lakedata_no_recovery)
characteristic.names=c(unique(lakedata$characteristic_name))
characteristic.names
plot_list2=list()
for( i in 1:length(characteristic.names)){
plot.data= generalplotfunction(characteristic.names[i])
plot_list2[[i]] <- plot.data
}
#No need this after the loop above.
generalplotfunction=function(z){
data=lakedata%>%
filter(characteristic_name==z)%>%
group_by(year)%>%
summarise(mean=mean(result_value))
graph=ggplot(data,aes(x=year,y=mean))+
geom_line()+ geom_point()+geom_vline(xintercept = 2002,color = "blue", size=1.5)+geom_vline(xintercept = 2008,  color = "blue", size=1.5)+labs(title=z)
return(graph)
}
a=generalplotfunction("PARTP")
#No need this after the loop above.
generalplotfunction=function(z){
data=lakedata%>%
filter(characteristic_name==z)%>%
group_by(year)%>%
summarise(mean=mean(result_value))
graph=ggplot(data,aes(x=year,y=mean))+
geom_line()+ geom_point()+geom_vline(xintercept = 2002,color = "blue", linewidth=1.5)+geom_vline(xintercept = 2008,  color = "blue", size=1.5)+labs(title=z)
return(graph)
}
library(ggpubr)
characteristic.names=c(unique(lakedata$characteristic_name))
plot_list2=list()
for( i in 1:length(characteristic.names)){
plot.data= generalplotfunction(characteristic.names[i])
plot_list2[[i]] <- plot.data
}
plot_list2
library(ggpubr)
a=generalplotfunction("PARTP")
b=generalplotfunction("PARTN")
c=generalplotfunction("PARTC")
d=generalplotfunction("TDP")
e=generalplotfunction("SO4")
f=generalplotfunction("TDN")
ggarrange(a, b, c,d,e,f+ rremove("x.text"),
ncol = 2, nrow = 3)
target2=unique(lakedata$characteristic_name)
target2.vec=as.data.frame(target2)
class(target2)
for (i in target2) {
generalplotfunction(i)
}
for (i in target2) {
generalplotfunction(i)
}
ggarrange(a, b, c,d,e,f+ rremove("x.text"),
ncol = 2, nrow = 3)
View(target2.vec)
View(plot.data)
histogramfunction= function(charateristic)
{
datafunc=lakedata%>%
filter(characteristic_name==charateristic)%>%
select(result_value)
graph=ggplot(datafunc, aes(x = result_value)) +
geom_histogram() +labs(title=charateristic)
return(graph)
}
# confused by this part of the code
target2=unique(new_lakedata$characteristic_name)
target2.vec=as.data.frame(target2)
class(target2)
histogramfunction= function(charateristic)
{
datafunc=new_lakedata%>%
filter(characteristic_name==charateristic)%>%
select(result_value)
graph=ggplot(datafunc, aes(x = result_value)) +
geom_histogram() +labs(title=charateristic)
return(graph)
}
a=histogramfunction("PARTP")
b=histogramfunction("PARTN")
c=histogramfunction("CHLA")
d=histogramfunction("TDP")
e=histogramfunction("SO4")
f=histogramfunction("TDN")
a=generalplotfunction("PARTP")
b=generalplotfunction("PARTN")
c=generalplotfunction("PARTC")
d=generalplotfunction("TDP")
e=generalplotfunction("SO4")
f=generalplotfunction("TDN")
ggarrange(a, b, c,d,e,f+ rremove("x.text"),
ncol = 2, nrow = 3)
ggarrange(PARTP_timeseries, PARTN_timeseries, PARTC_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
PARTP_timeseries <- generalplotfunction("PARTP")
PARTN_timeseries <- generalplotfunction("PARTN")
PARTC_timeseries <- generalplotfunction("PARTC")
TDP_timeseries <- generalplotfunction("TDP")
SO4_timeseries <- generalplotfunction("SO4")
TDN_timeseries <- generalplotfunction("TDN")
ggarrange(PARTP_timeseries, PARTN_timeseries, PARTC_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
CHLA_timeseries <- generalplotfunction("CHLA")
ggarrange(PARTP_timeseries, PARTN_timeseries, PARTC_timeseries, TDP_timeseries,
SO4_timeseries, TDN_timeseries, CHLA_timeseries+ rremove("x.text"),
ncol = 2, nrow = 3)
ggarrange(PARTP_hist, PARTN_hist, CHLA_hist, TDP_hist, SO4_hist,
TDN_hist+ rremove("x.text"),
ncol = 2, nrow = 3)
PARTP_hist <- histogramfunction("PARTP")
PARTN_hist <- histogramfunction("PARTN")
CHLA_hist <- histogramfunction("CHLA")
TDP_hist <- histogramfunction("TDP")
SO4_hist <- histogramfunction("SO4")
TDN_hist <- histogramfunction("TDN")
ggarrange(PARTP_hist, PARTN_hist, CHLA_hist, TDP_hist, SO4_hist,
TDN_hist+ rremove("x.text"),
ncol = 2, nrow = 3)
histogramfunction(target2[1])
for (i in target2) {
histogramfunction(target2[i])
}
normalfunction=function(names) {
n.data=lakedata%>%
filter(characteristic_name==names)%>%
select(result_value)
num.data=as.numeric(n.data$result_value)
norm.model=shapiro.test(num.data)
return(norm.model$p.value)
}
normalfunction <- function(names) {
n.data=lakedata%>%
filter(characteristic_name==names)%>%
select(result_value)
num.data=as.numeric(n.data$result_value)
norm.model=shapiro.test(num.data)
return(norm.model$p.value)
}
# creating a function that assesses the data's normality with shapiro test
normalfunction <- function(names) {
n.data=new_lakedata %>%
filter(characteristic_name==names) %>%
select(result_value)
num.data=as.numeric(n.data$result_value)
norm.model=shapiro.test(num.data)
return(norm.model$p.value)
}
characteristic.names=c(unique(new_lakedata$characteristic_name))
plot_list.norm <- list()
for( i in 1:length(characteristic.names)){
plot.data <- histogramfunction(characteristic.names[i])
plot_list.norm[[i]] <- plot.data
}
plot_list.norm
library(lme4)
library(lmerTest)
library(MuMIn
library(MuMIn)
#No need these just running mixed models below
library(lme4)
library(lmerTest)
library(MuMIn)
Partpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTP")
m1 <- aov(result_value~Treatment+as.factor(year),data = Partpdata)
m2 <- glm(result_value~Treatment,data = Partpdata)
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partpdata$year)), data=Partpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
Tdpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDP")
summary(aov(result_value~Treatment,data = Tdpdata))
summary(glm(result_value~Treatment,data = Tdpdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Tdpdata$year)), data=Tdpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Tdpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
AICc(m1, m2,P_model_MM)
AICc(m1, m2,P_model_MM)
#Inital Permutation code
permutation_function <- function(){
reshuffled <- partpdata2
reshuffled$TreatmentNEW <- sample(reshuffled$Treatment, size = nrow(reshuffled), replace = F)
before <- reshuffled %>% subset(TreatmentNEW == "Before") %>% summarise(mean = mean(result_value))
during <- reshuffled %>% subset(TreatmentNEW == "During") %>% summarise(mean = mean(result_value))
return(before-during
)
}
gaps <- c()
for (i in 1:1000){
gaps[i] <- permutation_function()
}
#No need these just running mixed models below
library(lme4)
library(lmerTest)
library(MuMIn)
Partpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTP")
m1 <- aov(result_value~Treatment+as.factor(year),data = Partpdata)
m2 <- glm(result_value~Treatment,data = Partpdata)
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partpdata$year)), data=Partpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
Tdpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDP")
summary(aov(result_value~Treatment,data = Tdpdata))
summary(glm(result_value~Treatment,data = Tdpdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Tdpdata$year)), data=Tdpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Tdpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
AICc(m1, m2,P_model_MM)
#No need these just running mixed models below
Partndata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTN")
summary(aov(result_value~Treatment,data = Partndata))
summary(glm(result_value~Treatment,data = Partndata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partndata$year)), data=Partndata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partndata, aes(x=Treatment,y=result_value))+
geom_boxplot()
TdNdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDN")
summary(aov(result_value~Treatment,data = TdNdata))
summary(glm(result_value~Treatment,data = TdNdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(TdNdata$year)), data=TdNdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=TdNdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
gaps <- c()
for (i in 1:1000){
gaps[i] <- permutation_function()
}
#Inital Permutation code
permutation_function <- function(){
reshuffled <- Partpdata
reshuffled$TreatmentNEW <- sample(reshuffled$Treatment, size = nrow(reshuffled), replace = F)
before <- reshuffled %>% subset(TreatmentNEW == "Before") %>% summarise(mean = mean(result_value))
during <- reshuffled %>% subset(TreatmentNEW == "During") %>% summarise(mean = mean(result_value))
return(before-during)
}
gaps <- c()
for (i in 1:1000){
gaps[i] <- permutation_function()
}
hist(unlist(gaps))
#have to check this
mixedmodelfunction <- function(characteristic){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic) %>%
select(result_value, Treatment, year)
return(summary(lmer(result_value~Treatment+(1|as.factor(mixed_model_data$year)), data=mixed_model_data, REML=FALSE)))
}
mixedmodelfunction("PARTP")
return(summary(lmer(result_value~Treatment+(1|as.factor(lakedata_no_recovery$year)), data=mixed_model_data, REML=FALSE)))
#have to check this
mixedmodelfunction <- function(characteristic){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic) %>%
select(result_value, Treatment, year)
return(summary(lmer(result_value~Treatment+(1|as.factor(lakedata_no_recovery$year)), data=mixed_model_data, REML=FALSE)))
}
mixedmodelfunction("PARTP")
PARTP_lmm <- lmer(result_value~Treatment(1|as.factor(year)), data= new_lakedata,
REML = FALSE)
PARTP_lmm <- lmer(result_value~Treatment(1|as.factor(year)), data= new_lakedata,
REML = FALSE)
PARTP_lmm <- lmer(result_value~Treatment+(1|as.factor(year)), data= new_lakedata,
REML = FALSE)
vectorofpvalues <- c()
for (i in 1:length(characteristic.names)){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic.names[i]) %>%
select(result_value, Treatment, year)
vectorofpvalues[i] <- summary(lmer(result_value~Treatment+(1|as.factor(mixed_model_data$year)), data=mixed_model_data, REML = FALSE))$coefficients[2,5]
}
lmer(result_value~Treatment+(1|as.factor(mixed_model_data$year)), data=mixed_model_data, REML = FALSE))$coefficients[2,5]
lmer(result_value~Treatment+(1|as.factor(mixed_model_data$year)), data=mixed_model_data, REML = FALSE)
unique(lakedata_no_recovery$characteristic_name
unique(lakedata_no_recovery$characteristic_name)
models <- NULL
for (i in 1:length(unique(lakedata_no_recovery$year))){
data <- lakedata_no_recovery %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment, data = lakedata_no_recovery))$coefficients[,c(1,4)],
year = i)
}
models <- NULL
for (i in 1:length(unique(lakedata_no_recovery$year))){
data <- lakedata_no_recovery %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment+(1|as.factor(lakedata_no_recovery$year)), data = lakedata_no_recovery))$coefficients[,c(1,4)],
year = i)
}
do.call(rbind, models)
for (i in 1:length(unique(lakedata_no_recovery$year))){
data <- lakedata_no_recovery %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment+(1|as.factor(lakedata_no_recovery$year)), data = lakedata_no_recovery))$coefficients[,c(1,4)],
year = year)
}
do.call(rbind, models)
for (i in 1:length(unique(lakedata_no_recovery$year))){
data <- lakedata_no_recovery %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment+(1|as.factor(lakedata_no_recovery$year)), data = lakedata_no_recovery))$coefficients[,c(1,4)],
year = lakedata_no_recovery$year)
}
for (i in 1:length(unique(lakedata_no_recovery$year))){
data <- lakedata_no_recovery %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment+(1|as.factor(lakedata_no_recovery$year)), data = lakedata_no_recovery))$coefficients[,c(1,4)],
year = i)
}
do.call(rbind, models)
unique(lakedata_no_recovery$year)
# FOR PARTP
models <- NULL
for (i in 1:length(unique(Partpdata$year))){
data <- Partpdata %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment+(1|as.factor(Partpdata$year)), data = Partpdata))$coefficients[,c(1,4)],
year = i)
}
do.call(rbind, models)
for (i in 1:length(unique(Partpdata$year))){
data <- Partpdata %>% subset(year == i)
models[[i]] <- cbind(
summary(lmer(result_value~Treatment+(1|as.factor(Partpdata$year)), data = Partpdata))$coefficients[,c(1,4)],
year = unique(Partpdata$year)[i])
}
do.call(rbind, models)
#have to check this
mixedmodelfunction <- function(characteristic){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic) %>%
select(result_value, Treatment, year)
return(summary(lmer(result_value~Treatment+(1|year), data=mixed_model_data, REML=FALSE)))
}
mixedmodelfunction("PARTP")
vectorofpvalues <- c()
for (i in 1:length(characteristic.names)){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic.names[i]) %>%
select(result_value, Treatment, year)
vectorofpvalues[i] <- summary(lmer(result_value~Treatment+(1|year), data=mixed_model_data, REML = FALSE))$coefficients[2,5]
}
lmer(result_value~Treatment+(1|year), data=mixed_model_data, REML = FALSE)
#have to check this
mixedmodelfunction <- function(characteristic){
mixed_model_data <- lakedata_no_recovery %>%
filter(characteristic_name == characteristic) %>%
select(result_value, Treatment, year)
return(summary(lmer(result_value~Treatment+(1|year), data=mixed_model_data, REML=FALSE)))
}
mixedmodelfunction("PARTP")
PARTP_lmm <- lmer(result_value~Treatment+(1|year), data= new_lakedata,
REML = FALSE)
PARTP_lmm
PARTP_lmm <- lmer(result_value~Treatment+(1|year), data= Partpdata,
REML = FALSE)
#No need these just running mixed models below
Partndata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTN")
summary(aov(result_value~Treatment,data = Partndata))
summary(glm(result_value~Treatment,data = Partndata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partndata$year)), data=Partndata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partndata, aes(x=Treatment,y=result_value))+
geom_boxplot()
TdNdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDN")
summary(aov(result_value~Treatment,data = TdNdata))
summary(glm(result_value~Treatment,data = TdNdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(TdNdata$year)), data=TdNdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=TdNdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
#No need these just running mixed models below
library(lme4)
library(lmerTest)
library(MuMIn)
Partpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="PARTP")
m1 <- aov(result_value~Treatment+as.factor(year),data = Partpdata)
m2 <- glm(result_value~Treatment,data = Partpdata)
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Partpdata$year)), data=Partpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Partpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
Tdpdata <- lakedata_no_recovery %>%
filter(characteristic_name=="TDP")
summary(aov(result_value~Treatment,data = Tdpdata))
summary(glm(result_value~Treatment,data = Tdpdata))
P_model_MM <- lmer(result_value~Treatment+(1|as.factor(Tdpdata$year)), data=Tdpdata, REML=FALSE)
summary(P_model_MM)
ggplot(data=Tdpdata, aes(x=Treatment,y=result_value))+
geom_boxplot()
AICc(m1, m2,P_model_MM)
Chladata <- lakedata_no_recovery %>%
filter(characteristic_name == "CHLA")
SO4data <- lakedata_no_recovery %>%
filter(characteristic_name == "SO4")
PARTP_lmm <- lmer(result_value~Treatment+(1|year), data= Partpdata,
REML = FALSE)
TDP_lmm <- lmer(result_value~Treatment+(1|year), data= Tdpdata,
REML = FALSE)
PARTN_lmm <- lmer(result_value~Treatment+(1|year), data= Partndata,
REML = FALSE)
TDN_lmm <- lmer(result_value~Treatment+(1|year), data= TdNdata,
REML = FALSE)
CHLA_lmm <- lmer(result_value~Treatment+(1|year), data= Chladata,
REML = FALSE)
SO4_lmm <- lmer(result_value~Treatment+(1|year), data= SO4data,
REML = FALSE)
#Making Permutation Function
filterfunction=function(characteristic){
data.perm=lakedata_no_recovery%>%
filter(characteristic_name==characteristic)%>%
select(Treatment,result_value,year)
return(data.perm)
}
permutation_function <- function(data12){
reshuffled <- data12
reshuffled$TreatmentNEW <- sample(reshuffled$Treatment, size = nrow(reshuffled), replace = F)
model=glm(result_value~TreatmentNEW, data = reshuffled)
#lmer(result_value~TreatmentNEW+(1|as.factor(reshuffled$year)), data=reshuffled, REML=FALSE)
summary.model=summary(model)
return(summary.model$coefficients[2,1])
}
final.perm.function= function(characteristic){
filtered.data=filterfunction(characteristic)
estimates <- c()
for (i in 1:10000){
estimates[i] <- permutation_function(filtered.data)
}
estimates=as.data.frame(estimates)
data.perm=lakedata_no_recovery%>%
filter(characteristic_name==characteristic)%>%
select(Treatment,result_value,year)
model.new=summary(glm(result_value~Treatment, data = data.perm))
lol=model.new$coefficients[2,1]
plot_s=ggplot(estimates, aes(x=estimates)) +
geom_histogram( colour="black", fill="white")+ geom_vline(aes(xintercept=lol),
color="blue", linetype="dashed", size=1)+labs(title =characteristic)
return(plot_s)
}
characteristic.names=c(unique(lakedata_no_recovery$characteristic_name))
plot_list <- list()
for( i in 1:(length(characteristic.names)-1)){
plot.data= final.perm.function(characteristic.names[i])
plot_list[[i]] <- plot.data
}
